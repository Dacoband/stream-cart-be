// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopService.Infrastructure.Data;

#nullable disable

namespace ShopService.Infrastructure.Migrations
{
    [DbContext(typeof(ShopContext))]
    [Migration("20250721170913_AddNewEntitySchema")]
    partial class AddNewEntitySchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopService.Domain.Entities.Shop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("approval_date");

                    b.Property<string>("ApprovalStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("approval_status");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("bank_name");

                    b.Property<decimal>("CompleteRate")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("complete_rate");

                    b.Property<string>("CoverImageURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("logo_url");

                    b.Property<decimal>("RatingAverage")
                        .HasColumnType("decimal(3,2)")
                        .HasColumnName("rating_average");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("registration_date");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("shop_name");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_number");

                    b.Property<int>("TotalProduct")
                        .HasColumnType("integer")
                        .HasColumnName("total_product");

                    b.Property<int>("TotalReview")
                        .HasColumnType("integer")
                        .HasColumnName("total_review");

                    b.HasKey("Id");

                    b.HasIndex("ApprovalStatus")
                        .HasDatabaseName("ix_shops_approval_status");

                    b.HasIndex("RatingAverage")
                        .HasDatabaseName("ix_shops_rating_average");

                    b.HasIndex("ShopName")
                        .HasDatabaseName("ix_shops_shop_name");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_shops_status");

                    b.ToTable("shops", (string)null);
                });

            modelBuilder.Entity("ShopService.Domain.Entities.ShopVoucher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("available_quantity");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<decimal?>("MaxValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_value");

                    b.Property<decimal>("MinOrderAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("min_order_amount");

                    b.Property<Guid>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<int>("UsedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("used_quantity");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_shop_vouchers_code");

                    b.HasIndex("EndDate")
                        .HasDatabaseName("ix_shop_vouchers_end_date");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_shop_vouchers_is_active");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("ix_shop_vouchers_shop_id");

                    b.HasIndex("StartDate")
                        .HasDatabaseName("ix_shop_vouchers_start_date");

                    b.HasIndex("Type")
                        .HasDatabaseName("ix_shop_vouchers_type");

                    b.HasIndex("ShopId", "IsActive", "StartDate", "EndDate")
                        .HasDatabaseName("ix_shop_vouchers_active_lookup");

                    b.ToTable("shop_vouchers", (string)null);
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m)
                        .HasColumnName("balance");

                    b.Property<string>("BankAccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("bank_name");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_modified_by");

                    b.Property<string>("OwnerType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("owner_type");

                    b.Property<Guid?>("ShopId")
                        .HasColumnType("uuid")
                        .HasColumnName("shop_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique()
                        .HasDatabaseName("ix_wallets_shop_id");

                    b.ToTable("wallets", (string)null);
                });

            modelBuilder.Entity("ShopService.Domain.Entities.ShopVoucher", b =>
                {
                    b.HasOne("ShopService.Domain.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_shop_vouchers_shops");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShopService.Domain.Entities.Wallet", b =>
                {
                    b.HasOne("ShopService.Domain.Entities.Shop", null)
                        .WithOne()
                        .HasForeignKey("ShopService.Domain.Entities.Wallet", "ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_wallets_shops");
                });
#pragma warning restore 612, 618
        }
    }
}
